



Синхронный (блокирующий)
Асинхронный (неблокирующий)


При работе с потоками, ОС решает когда надо делать переключение и когда вернуться
к потоку. Для создания каждого потока нужно выделить память. Плюс. переключение между
потоками тоже занимает время, пусть небольшое, но оно может накапливаться в заметное увеличение времени.
При работе с потоками работа функции может быть прервана в любое время и из-за
этого возникает масса проблем характерных для потоков, например: race conditions, dead locks.

Асинхронное программирование отличается тем, что операции ввода-вывода неблокирующие.
Вместо ожидания ответа на какую-то операцию, асинхронный вариант, например,
отправляет команду на оборудование и говорит "позовите меня, когда будет ответ".
Всеми операциями в асинхронном программировании управляет event loop. Именно 
event loop ждет разных событий ввода-вывода и вызывает соответствующие сопрограммы.

При работе с asyncio используется кооперативная многозадачность - все участники
взаимодействия должны сами отдавать управление.


Основная причина использования asyncio - улучшить время работы программы, уменьшив
время ожидания ответа от операций ввода-вывода. В эти моменты будет выполняться 
переключение на другие задачи.

Отличия от многопоточной работы:

* при работе с потоками, планировщик может прервать работу потока в любой момент,
  не всегда это "удобный" момент, поэтому надо явно указывать, что в какие-то моменты
  прерывать поток нельзя
* при использовании asyncio работа идет в одном потоке
* при работе с сопрограммами, мы явно указываем в каком месте надо сделать переключение
* await приостанавливает работу текущей сопрограммы и вызывает указанный объект.
  То есть, если в текущей сопрограмме написано ``await run_coro``, текущая сопрограмма 
  останавливается и планирует запуск сопрограммы run_coro в цикле событий

